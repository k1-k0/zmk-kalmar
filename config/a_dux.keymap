// Copyright (c) 2024 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        lpht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <160>;
            quick-tap-ms = <160>;
            require-prior-idle-ms = <123>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            hold-trigger-on-release;
        };

        rpht: right_positional_hold_tap {            
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <160>;
            quick-tap-ms = <160>;
            require-prior-idle-ms = <123>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps_l {
            timeout-ms = <20>;
            key-positions = <1 2>;
            bindings = <&kp CAPS>;
        };

        combo_pscrn_l {
            timeout-ms = <20>;
            key-positions = <1 3>;
            bindings = <&kp PSCRN>;
        };

        combo_lpar_l {
            timeout-ms = <20>;
            key-positions = <2 3>;
            bindings = <&kp LPAR>;
        };

        combo_rpar_r {
            timeout-ms = <20>;
            key-positions = <6 7>;
            bindings = <&kp RPAR>;
        };

        combo_del_r {
            timeout-ms = <20>;
            key-positions = <6 8>;
            bindings = <&kp DEL>;
        };

        combo_caps_word_r {
            timeout-ms = <20>;
            key-positions = <7 8>;
            bindings = <&caps_word>;
        };

        combo_f14_l {
            timeout-ms = <20>;
            key-positions = <11 12>;
            bindings = <&kp F14>;
        };

        combo_equal_l {
            timeout-ms = <20>;
            key-positions = <11 13>;
            bindings = <&kp EQUAL>;
        };

        combo_minus_l {
            timeout-ms = <20>;
            key-positions = <12 13>;
            bindings = <&kp MINUS>;
        };

        combo_bslh_r {
            timeout-ms = <20>;
            key-positions = <16 18>;
            bindings = <&kp BSLH>;
        };

        combo_sqt_r {
            timeout-ms = <20>;
            key-positions = <16 17>;
            bindings = <&kp SQT>;
        };

        combo_f15_r {
            timeout-ms = <20>;
            key-positions = <17 18>;
            bindings = <&kp F15>;
        };

        combo_grave_l {
            timeout-ms = <20>;
            key-positions = <21 22>;
            bindings = <&kp GRAVE>;
        };

        combo_lbkt_l {
            timeout-ms = <20>;
            key-positions = <22 23>;
            bindings = <&kp LBKT>;
        };

        combo_rbkt_r {
            timeout-ms = <20>;
            key-positions = <26 27>;
            bindings = <&kp RBKT>;
        };

        combo_tab_r {
            timeout-ms = <20>;
            key-positions = <27 28>;
            bindings = <&kp TAB>;
        };

        combo_toggle_game_l {
            timeout-ms = <20>;
            key-positions = <20 24>;
            bindings = <&tog 5>;
        };

        combo_toggle_game_r {
            timeout-ms = <20>;
            key-positions = <25 29>;
            bindings = <&tog 5>;
        };

        mo_ble {
            bindings = <&mo 4>;
            key-positions = <30 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W         &kp E          &kp R          &kp T                                     &kp Y       &kp U          &kp I          &kp O         &kp P
&lpht LGUI A  &lpht LALT S  &lpht LCTRL D  &lpht LSHFT F  &lt 3 G                                   &lt 3 H     &rpht RSHFT J  &rpht RCTRL K  &rpht RALT L  &rpht RGUI SEMI
&kp Z         &kp X         &lt 1 C        &lt 2 V        &kp B                                     &kp N       &lt 2 M        &lt 1 COMMA    &kp DOT       &kp FSLH
                                                          &lt 1 SPACE  &lt 2 ENTER    &lt 2 ESCAPE  &lt 1 BSPC
            >;
        };

        lower_layer {
            bindings = <
&kp FSLH                  &kp N7           &kp N8            &kp N9            &kp PLUS                     &kp CAPS    &kp PG_UP         &kp UP            &kp PG_DN         &kp INS
&lpht LGUI KP_MULTIPLY  &lpht LALT N4  &lpht LCTRL N5  &lpht LSHFT N6  &kp MINUS                    &kp HOME    &rpht RSHFT LEFT  &rpht RCTRL DOWN  &rpht RALT RIGHT  &rpht RGUI END
&kp N0                    &kp N1           &kp N2            &kp N3            &kp EQUAL                    &caps_word  &kp DEL           &kp TAB           &kp K_APP         &kp PSCRN
                                                                               &trans     &trans    &trans  &trans
            >;
        };

        raise_layer {
            bindings = <
&kp KP_DIVIDE    &kp AMPS  &kp ASTRK  &kp LPAR   &kp DQT                      &kp TILDE  &kp EQUAL  &kp GRAVE  &kp BSLH  &kp PIPE
&kp KP_MULTIPLY  &kp DLLR  &kp PRCNT  &kp CARET  &kp SQT                      &kp MINUS  &kp LPAR   &kp LBKT   &kp LBRC  &kp LT
&kp RPAR         &kp EXCL  &kp AT     &kp HASH   &kp GRAVE                    &kp UNDER  &kp RPAR   &kp RBKT   &kp RBRC  &kp GT
                                                 &trans     &trans    &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&out OUT_BLE      &kp F7         &kp F8          &kp F9          &kp F10                    &kp PAUSE_BREAK  &kp C_BRI_UP        &kp C_VOL_UP          &kp C_BRI_DN       &out OUT_BLE
&lpht LGUI PSCRN  &lpht LALT F4  &lpht LCTRL F5  &lpht LSHFT F6  &kp F11                    &kp INS          &rpht RSHFT C_PREV  &rpht RCTRL C_VOL_DN  &rpht RALT C_NEXT  &rpht RGUI PSCRN
&out OUT_USB      &kp F1         &kp F2          &kp F3          &kp F12                    &key_repeat      &kp C_STOP          &kp C_MUTE            &kp C_PP           &out OUT_USB
                                                                 &trans   &trans    &trans  &trans
            >;
        };

        bt_layer {
            bindings = <
&bootloader     &sys_reset  &trans  &bt BT_SEL 0  &bt BT_SEL 1                    &bt BT_SEL 1  &bt BT_SEL 0  &trans  &sys_reset  &bootloader
&trans          &bt BT_CLR  &trans  &trans        &bt BT_SEL 2                    &bt BT_SEL 2  &trans        &trans  &bt BT_CLR  &trans
&bt BT_CLR_ALL  &trans      &trans  &bt BT_SEL 4  &bt BT_SEL 3                    &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans      &bt BT_CLR_ALL
                                                  &trans        &trans    &trans  &trans
            >;
        };

        game_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T                               &kp Y     &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G                               &kp H     &kp J  &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B                               &kp N     &kp M  &kp COMMA  &kp DOT  &kp FSLH
                            &kp SPACE  &kp ENTER    &kp ESCAPE  &kp BSPC
            >;
        };
    };
};
