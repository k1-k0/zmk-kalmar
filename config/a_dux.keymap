// Copyright (c) 2024 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&sk {
    release-after-ms = <4000>;
    quick-release;
};

&lt {
    tapping-term-ms = <100>;
};

/ {
    combos {
        compatible = "zmk,combos";

        mo_fun {
            bindings = <&mo 4>;
            key-positions = <30 31>;
        };

        mo_num {
            bindings = <&mo 3>;
            key-positions = <33 32>;
        };
    };

    macros {
        lc: mo_layer_switch_with_an_embedded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
            compatible = "zmk,behavior-macro-one-param";
            label = "mo_layer/cancel";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwe {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T                                   &kp Y           &kp U  &kp I      &kp O    &kp SQT
&kp A  &kp S  &kp D  &kp F  &kp G                                   &kp H           &kp J  &kp K      &kp L    &kp P
&kp Z  &kp X  &kp C  &kp V  &kp B                                   &kp N           &kp M  &kp COMMA  &kp DOT  &kp SEMI
                            &lc nav  &kp SPACE           &kp RSHFT  &lc sym
            >;
        };

        nav {
            bindings = <
&kp INS    &kp CAPSLOCK  &key_repeat  &caps_word  &kp ESC                      &kp ESC    &kp HOME  &kp UP_ARROW  &kp END    &kp PG_UP
&sk LGUI   &sk LALT      &sk LCTRL    &sk LSHFT   &kp ENTER                    &kp ENTER  &kp LEFT  &kp DOWN      &kp RIGHT  &kp PG_DN
&kp PSCRN  &mo 6         &kp DEL      &kp K_APP   &kp TAB                      &kp TAB    &kp F14   &kp BSPC      &kp F15    &kp PSCRN
                                                  &trans     &trans    &trans  &trans
            >;
        };

        sym {
            bindings = <
&kp PIPE   &kp GRAVE  &kp LBRC  &kp RBRC  &kp TILDE                    &kp DLLR  &kp PERCENT  &kp CARET     &kp AMPS    &kp STAR
&kp EQUAL  &kp SLASH  &kp LBKT  &kp RBKT  &kp MINUS                    &kp BSLH  &sk RSHFT    &sk RCTRL     &sk RALT    &sk RGUI
&kp PLUS   &kp QMARK  &kp LPAR  &kp RPAR  &kp UNDER                    &kp EXCL  &kp AT       &kp KP_COMMA  &kp KP_DOT  &kp HASH
                                          &trans     &trans    &trans  &trans
            >;
        };

        num {
            bindings = <
&kp KP_DIVIDE    &kp N7  &kp N8  &kp N9  &kp KP_PLUS                        &trans          &trans     &trans        &trans      &trans
&kp KP_ASTERISK  &kp N4  &kp N5  &kp N6  &kp KP_SUBTRACT                    &kp KP_ENTER    &sk RSHFT  &sk RCTRL     &sk RALT    &sk RGUI
&kp EQUAL        &kp N1  &kp N2  &kp N3  &kp N0                             &kp KP_NUMLOCK  &kp BSPC   &kp KP_COMMA  &kp KP_DOT  &trans
                                         &trans           &trans    &trans  &trans
            >;
        };

        fun {
            bindings = <
&trans    &trans    &trans     &trans     &trans                     &kp F12  &kp F7  &kp F8  &kp F9  &kp PAUSE_BREAK
&sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &kp INS                    &kp F11  &kp F5  &kp F6  &kp F7  &kp PSCRN
&trans    &trans    &trans     &trans     &trans                     &kp F10  &kp F1  &kp F2  &kp F3  &kp SCROLLLOCK
                                          &trans   &trans    &trans  &trans
            >;
        };

        med {
            bindings = <
&trans    &trans    &trans     &trans     &trans                    &trans    &kp C_BRI_DEC  &kp C_VOL_UP  &kp C_BRI_UP  &trans
&sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans                    &kp C_PP  &kp C_PREV     &kp C_VOL_DN  &kp C_NEXT    &kp PSCRN
&trans    &trans    &trans     &trans     &trans                    &trans    &trans         &kp C_MUTE    &trans        &trans
                                          &trans  &trans    &trans  &trans
            >;
        };

        mou {
            bindings = <
&trans  &trans  &trans    &trans    &trans                      &trans          &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &trans
&trans  &trans  &mkp MB4  &mkp MB5  &trans                      &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT
&trans  &trans  &mkp MB1  &mkp MB2  &mkp MB3                    &trans          &trans          &trans          &trans           &trans
                                    &trans    &trans    &trans  &trans
            >;
        };

        bt {
            bindings = <
&bt BT_CLR_ALL  &bootloader   &trans        &sys_reset    &bt BT_CLR                      &bt BT_CLR    &sys_reset    &trans        &bootloader   &bt BT_CLR_ALL
&bt BT_SEL 4    &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans          &out OUT_TOG  &out OUT_USB  &out OUT_BLE  &trans                          &trans        &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &trans
                                                          &trans        &trans    &trans  &trans
            >;
        };

        gam {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T                               &kp Y     &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G                               &kp H     &kp J  &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B                               &kp N     &kp M  &kp COMMA  &kp DOT  &kp FSLH
                            &kp SPACE  &kp ENTER    &kp ESCAPE  &kp BSPC
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        mo_med {
            if-layers = <1 2>;
            then-layer = <5>;
        };

        mo_ble {
            if-layers = <3 4>;
            then-layer = <7>;
        };
    };
};
